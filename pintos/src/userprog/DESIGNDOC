		     +--------------------------+
    	     |		CS 153				|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jonathan Candelaria <jcand003@ucr.edu>
Selik Samai <santo003@ucr.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

http://www.scs.stanford.edu/10wi-cs140/labs/10wi-proj2.pdf

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

no modifications or new data structures, however the following functions
were modified:

the following functions were modified
from:
static bool setup_stack(void **esp);
to:
static bool setup_stack(void **esp, const char* filename, char **saveptr);

from:
load(const char * file_name, void(**eip) (void), void **esp);
to:
load(const char * file_name, void(**eip) (void), void **esp, char **saveptr);


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We parse the user input in order, from left to right and each arguement's
string is pushed onto the stack. We keep a pointer to each arguement's 
positin on the stack with char **argv. We use malloc to give the 
appropriate memory because we do not know the arguement number in compile 
time. To prevent overflow we double the size if argv is full.
After saving each arguement strings position in the stack, the size of
the stack is alligned. The array of pointers is pushed onto the stack in 
reverse order. We then free argv. Lastly, argv, argc, and the manipulated
return address are pushed onto the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

If pintos were to implement strtok() then there would be race conditions.
The third arguement of strtok_r() - char **saveptr is used to maintain
context between successive calls that parse the same string.
An example is if two different threads are calling strtok(). Thread A
could use the token from thread B, which could possibly crash the OS.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The first advantage is that is much safer to use shell based parsing.
This way the shell can check to see any unsafe command before it arrives
to the kernel. It also reduces complexity of kernel operations.
The second advantage is the PATH environment variable. Unix shells
give more flexibility in looking for executable files, in that the shell
does the searching. Whereas in Pintos, the kernel would be tasked to look
for the specific file during process initialization.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

The following were added in struct thread in thread.h

-int fd
file descriptor counter for a process, 0 = stdin , 1 = stdout, 
initialized to 2

-struct list list_of_children
list of children from a process

-struct list list_of_files
list of open files from a process

-struct list_of_lock
list of locks the process holds. Lock is released on exit

The following was added so syscall.c 
struct process_info
{
	bool wait;
	bool exit;
	int exit_status;
	int pid;
	int load;
	struct semaphore load_semaphore
	struct semaphore exit_semaphore
	struct list_elem elem;
};
-bool wait
indicator if parent is waiting on child

-bool exit
indicator of if child has exited

-int exit_status
exit status of the child

-int pid
child processes pid

-int load
indicator of child process had loaded, load success or load failure

-struct semaphore load_semaphore
semaphore used in exec and load

-struct semaphore exit_semaphore
semaphore used in wait and exit

-struct lock file_lock
global lock for filesystem, used in file system syscalls

struct do_file
{
	int fd;
	struct file *file;
	struct list_elem elem;
};
-int fd
file descriptor which corresponds to open file

-struct file *file
the open file struct

-struct list_elem elem
list element in processes file list


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

The file descriptors are unique just within a single process. The process
opening the file gets that specific file descriptor.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

In our syscall handler we first check if the stack pointer is valid.
If valid, we derefrence the stack pointer, this allows us to find
which syscall is to be run.
We retrieve each arguement and check its validity. For pointer arguements
we check for validity and derefrence to a kernel virtual adress. For
strings and buffers, each byte is checked for validity. For syscalls, we
call with the arguements, then user data can be returned through
the interrupt frame's register eax.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Each byte requires one call to pagedir_get_page() because the number of 
following byes pointed to by the user lie on the same page is not known.
For 2 bytes and for 4096 bytes the number of calls should be at most 2 
because each number of byes can be split into two pages at most. 


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The process with a child pid goes through its list of child processes
and searches for the process with the pid. If the child pid does not
exist, or if the current process is already waiting on the child we 
return -1. Else the child processes bool wait is set to true and the
current process waits until that process exits. Then the current process
gets the childs exit status and removes the child from its child list and
we return the exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We have seperate functions for pointers. One function has us check the
validity of the individual pointer, in this function we also tell our
process to exit if the pointer is invalid. This function is usedin the 
functions that check the validity of buffers and strings. Another function
derefrences the pointers.
When thread_exit is called, it calls process_exit if the thread is a user
program. In process_exit the file and list of child processes are freed. 
In thread_exit, the lock list is freed.
If a user process calls write with a buffer size of X, where the pointer
to the X - ith byte is invalid. The call number is first read from the 
user stack along with the arguements. For each pointer in the range of
the buffer size, the pointer is checked for validity. At the X - ith
byte, the validity will fail and exit will be called and -1 returned.
From here we see that the exit status is a failure and the call thread_exit
. The resources are freed and the thread dies and the next thread is run.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

When a process calls exec, it creates a child process struct for the child
process in its child list. The childs load variable is set to not loaded 
flag and the load semaphore is set down. Then when the child process is 
loaded it sets the load variable to load fail flag or load success flag 
and the load semaphore is set up.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

We initialize a wait semaphore to zero. This way it is irrelevent in 
the order of P and C finishing.
If P calls wait(C) before C exits, P sees the exit flag is false for C 
and gets added to the semaphore's waiting list until C sets the exit flag
to true and sets the semaphore up. This wakes the parent. 
The process info struct in the parents child list must be freed. These 
structs are freed once a parent process completes a wait for its child.
If P terminates Before C exits, C will detect that its P thread is not
alive, therefore it does not try to access its child process struct in the 
parent. 
If P terminates without waiting after C exits, the process info struct
for C is simply freed with all other remaining child processes in 
remove child process. 
The only special case is the initial thread which doesnt have a parent. 
---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

For pointers, there are several places where errors could occur. 
With  pointers that the user tries to access in user space which are 
invalid, a page fault interrupt occurs and exit is called an -1 is 
returned.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Because file descriptors are unique for each process, there is no need to
eliminate race conditions. A disadvantage is that our design does not 
account for overflow.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Each process only contains one thread. The advantage of this is that it 
is simple although our approach fails for multithreaded processes.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
